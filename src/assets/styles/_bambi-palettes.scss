@use "sass:map";
@use "@angular/material" as mat;

@mixin divider($theme) {
	$color-config: mat.get-color-config($theme);
	$primary-palette: map.get($color-config, "primary");
	mat-divider {
		border-top-color: mat.get-color-from-palette($primary-palette, 500) !important;
	}
}

@mixin chips($theme, $isDarkTheme) {
	$color-config: mat.get-color-config($theme);
	$primary-palette: map.get($color-config, "primary");
	$accent-palette: map.get($color-config, "accent");

	//chip do modo detalhe
	.mat-mdc-standard-chip.mdc-evolution-chip--disabled {
		background-color: mat.get-color-from-palette($primary-palette);
	}
	// chip modo edição
	#record-edit-form {
		mat-chip-row {
			background-color: mat.get-color-from-palette($accent-palette);
			@if ($isDarkTheme) {
				* {
					color: #000;
				}
			}
		}
	}
	//chip modo listagem
	.mainform-table-vice,
	.mainform-table-waikiki {
		mat-chip {
			background-color: mat.get-color-from-palette($primary-palette);
		}
	}
}

@mixin dialogs($theme, $isDarkTheme) {
	$color-config: mat.get-color-config($theme);
	$accent-palette: map.get($color-config, "accent");
	$warn-palette: map.get($color-config, "warn");

	.dialog-header-wrapper {
		background-color: mat.get-color-from-palette($accent-palette);
		&.warn-dialog {
			background-color: mat.get-color-from-palette($warn-palette);
			.dialog-header-title {
				* {
					color: #fff;
				}
			}
		}
	}
}

@mixin menus($theme, $isDarkTheme) {
	$color-config: mat.get-color-config($theme);
	$primary-palette: map.get($color-config, "primary");
	$accent-palette: map.get($color-config, "accent");

	// main-menu entries
	#entries-wrapper {
		background-color: mat.get-color-from-palette($accent-palette);
		color: #000;
	}
	// main-menu "open" button
	.menu-toggler {
		background-color: mat.get-color-from-palette($primary-palette);
		@if ($isDarkTheme) {
			* {
				color: rgba(255, 255, 255, 0.87) !important;
			}
		}
	}
	// main-menu :hover effect
	#open-menu-wrapper {
		.main-entry:hover,
		.sub-entry:hover {
			background-color: rgba(255, 255, 255, 0.3);
			@if $isDarkTheme {
				background-color: rgba(0, 0, 0, 0.15);
			}
		}
	}
	// main-menu ng-scrollbar bg color
	#menu-scroll {
		background-color: mat.get-color-from-palette($accent-palette);
	}
}

@mixin formfields($theme, $isDarkTheme: false) {
	//default form-fields override
	@if $isDarkTheme {
		.mdc-text-field--outlined:not(.mdc-text-field--disabled) {
			.mdc-notched-outline__leading,
			.mdc-notched-outline__notch,
			.mdc-notched-outline__trailing {
				border-color: rgba(255, 255, 255, 0.2);
			}
		}
		#header-wrapper {
			#input-section {
				.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) {
					.mdc-notched-outline__leading,
					.mdc-notched-outline__notch,
					.mdc-notched-outline__trailing {
						border-color: rgba(0, 0, 0, 0.2);
					}
				}
				.mdc-text-field--outlined:hover:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) {
					.mdc-notched-outline__leading,
					.mdc-notched-outline__notch,
					.mdc-notched-outline__trailing {
						border-color: rgba(0, 0, 0, 0.4);
					}
				}
			}
		}
	}
}

@mixin imagepicker($theme) {
	$color-config: mat.get-color-config($theme);
	$accent-palette: map.get($color-config, "accent");
	$primary-palette: map.get($color-config, "primary");

	.img-picker-pic-wrapper {
		border-color: mat.get-color-from-palette($accent-palette);
	}
	.picker-controller {
		border-color: transparent;
		background: mat.get-color-from-palette($primary-palette);
		mat-icon {
			color: #fff;
		}
	}
}

@mixin generic($theme, $isDarkTheme: false) {
	$color-config: mat.get-color-config($theme);
	$warn-palette: map.get($color-config, "warn");

	.discarding-label {
		color: mat.get-color-from-palette($warn-palette);
	}
	.mat-mdc-table {
		background: transparent !important;
	}

	#drawer-wrapper {
		background-color: #fff;
	}

	@if $isDarkTheme {
		#app-wrapper {
			background: #222;
		}

		.dialog-details-wrapper {
			color: rgba(255, 255, 255, 0.87);
		}
		#drawer-wrapper {
			background-color: #222;
		}
		.mat-mdc-form-field-icon-suffix {
			color: rgba(255, 255, 255, 0.87);
		}
	}
}

@mixin header($theme, $isDarkTheme: false) {
	$color-config: mat.get-color-config($theme);
	$primary-palette: map.get($color-config, "primary");

	#header-wrapper {
		background-color: mat.get-color-from-palette($primary-palette);
		* {
			color: #000;
		}
		@if $isDarkTheme {
			* {
				color: rgba(255, 255, 255, 0.87);
			}
		}
	}
}

@mixin mainforms($theme, $isDarkTheme: false) {
	@if $isDarkTheme {
		//product details disabled fab override
		.mat-mdc-mini-fab[disabled][disabled] {
			--mdc-fab-container-color: rgba(0, 0, 0, 0.12);
		}
		.mainform-header {
			.header-title {
				* {
					color: rgba(255, 255, 255, 0.87);
				}
			}
		}
	}
}

@mixin theme($theme, $isDarkTheme: false) {
	$color-config: mat.get-color-config($theme);
	@if $color-config != null {
		@include divider($theme);
		@include menus($theme, $isDarkTheme);
		@include header($theme, $isDarkTheme);
		@include formfields($theme, $isDarkTheme);
		@include dialogs($theme, $isDarkTheme);
		@include chips($theme, $isDarkTheme);
		@include imagepicker($theme);
		@include generic($theme, $isDarkTheme);
		@include mainforms($theme, $isDarkTheme);
	}
}
